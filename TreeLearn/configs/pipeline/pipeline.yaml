# default_args is used to include configs from the _modular folder into this config. This ensures a modular way of combining different config files.
# Individual entries of the loaded default args can be changed by simply redefining them as is done below under 'modification of default args'
default_args: ["configs/_modular/sample_generation.yaml", "configs/_modular/model.yaml", "configs/_modular/grouping.yaml", "configs/_modular/dataset_test.yaml"]

############ modification of default args
sample_generation:
  search_radius_features: 0.4
  inner_edge: 8
  outer_edge: 13.5
  stride: 0.5

grouping:
  tau_group: 0.15

model:
  spatial_shape: [500, 500, 1000]

############ non-default args
forest_path: 'data/pipeline/L1W/forest/L1W.laz' # path to forest point cloud to be segmented (las, npy, npz or txt)
pretrain: 'data/model_weights/model_weights_diverse_training_data.pth' # path to trained network parameters for offset and semantic prediction
fp16: True # using half precision for network prediction
tile_generation: True # whether to generate tiles for the forest point cloud to be segmented. If you re-run the pipeline multiple times for the same point cloud, this can be set to False after the first time.

dataloader:
  batch_size: 1
  num_workers: 1

shape_cfg:
  alpha: 0 # alpha value in hull calculation to get xy outline of forest point cloud. 0 leads to convex hull. alpha=0.6 nice for point clouds that are non-convex in the xy plane.
  outer_remove: 13.5 # When returning the segmentation result, crop outer_remove meters at the edges of the input point cloud. This is recommended since edge predictions are worse because they lack context for prediction.
  buffer_size_to_determine_edge_trees: 0.3 # determine which trees are completely within the segment. This is used to return different categories of trees (e.g. completely vs. partly within cropped result).

save_cfg:
  save_formats: ['laz', 'npz'] # save formats for predicted forest (laz, las, npz, npy or txt)
  save_treewise: True # additionally save predicted trees individually as las files
  save_pointwise: True # additionally save pointwise results as numpy arrays (offset predictions, semantic predictions, etc.)
  return_type: "voxelized" # returns predictions on either the "voxelized_and_filtered", "voxelized" or "original" point cloud. Takes longer if "original" is selected since predictions must be propagated to original input points.
